# This is bagel in block code (without syntactic cleanup)

# PEGjs

start
  = block

block
  = "[" space a:(serries)* "]" {return a}

serries
  = a:(block / number / setword / coword / ciword / word / ctxword / string) space {return a}

space
  = " "+ 

setword
  = w:anychar+ ":" {return ["setword",w.join("")]} 

parser1coword
  = w:anychar+ ">" {return ["coword",w.join("")]} 

ciword
  =  ">" w:anychar+ {return ["ciword",w.join("")]} 


ctxword
  = "!" w:anychar+ {return ["callword",w.join("")]} 

word
  = w:anychar+ {return ["word",w.join("")]}

string
  = "'" t:(anychar+) "'" {return ["string",t.join("")]}

number
  = d:[0-9]+ {return ["number",parseInt(d.join(""),10)]}

anychar
  = [a-zA-Z0-9]



# Example code

[ pers: ctx [ name age ] sayhi: bag [ !pers ] [ 'hi' name> join print ] !pers 'jim' >name sayhi ]


# parser would have to be able to create contexts (G_contexts { "name": [ [ "name" ] [ "age" ] ] })
# parser would have to have native word bag that creates bagfunc from 2 blocks (just stores them parsed) ( G_namespace { sayhi: [ "bagfunc" [ [ "pers ] ] [ ...... ] ] } ) 
# when it sees the the word it looks it up amongst natives, if not in natives then it goes to global context and depending on type (first value in array) acts on it
# some other day ... as I see now, this could be just one dialect in a rebol like language
